#!/bin/bash

# Import global conf
. $global_conf

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/vmware/bin
export HOME=/root

# Tested on CentOS
if [ -x /usr/sbin/selinuxenabled ] && /usr/sbin/selinuxenabled; then
    if [ -x /usr/sbin/setenforce ]; then
        /usr/sbin/setenforce Permissive
    else
        echo 'SELinux is enabled. This may cause installation to fail.'
    fi
fi

#########PARAMETERS FROM APPLICATION DIRECTOR - DEFAULTS#########
#Required Properties
#MW_BASE=/oracle
#OVDADMINUSER="cn=ovdadmin"
#OVDADMINPASSWORD=admin123
#OIDHOSTNAME=10.113.53.129

#########SCRIPT INTERNAL PARAMETERS#########
MW_HOME=$MW_BASE/products/fmw
CONFIGTEMPLATESLOCATION=/oracle/install/OVDinstaller/Templates
IDMCONFIGLOCATION="/oracle/config/OVD"
IDMCONFIGADDLOCALOUSCRIPT="$IDMCONFIGLOCATION/OVD_addLocalOUs.sh"
IDMCONFIGADDADAPTERSCRIPT="$IDMCONFIGLOCATION/OVD_addAdapters.sh"
OVDMODVMWPERSONSCRIPT="$IDMCONFIGLOCATION/OVD_mod_vmwPerson.sh"

OVDPORT=6501

###########Parameter Validation Functions##################
## Function To Display Error and Exit
function check_error()
{
   if [ ! "$?" = "0" ]; then
      error_exit "$1";
   fi
}

function error_exit()
{
   echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
   exit 1
}

## Function To Validate Integer
function valid_int()
{
   local data=$1
   if [[ $data =~ ^[0-9]{1,9}$ ]]; then
      return 0;
   else
      return 1
   fi
}

function valid_length()
{
   local data=$1
   if [[ ${#data} -ge 8 ]]; then
      return 0;
   else
      return 1
   fi
}

function echo_d()
{
    CURDATE=`date +%H:%M:%S`
    echo -e $CURDATE  "$*"
}

## Function To Replace String in a File
function replace_string_in_file()
{
   local processFile=$1
   local oldString=$2
   local newString=$3
   newStringEsc="${newString//\//\\/}"      
   
   sed -ie "s/${oldString}/${newStringEsc}/" ${processFile}
}

####################SCRIPT EXECUTION ##################
echo_d "Parameter Validation"

if [ "x${MW_BASE}" = "x" ]; then
    error_exit "MW_BASE not set."
fi

if [ "x${OVDPORT}" = "x" ]; then
    error_exit "OVDPORT not set."
fi

if [ "x${OVDADMINUSER}" = "x" ]; then
    error_exit "OVDADMINUSER not set."
fi

if [ "x${OVDADMINPASSWORD}" = "x" ]; then
    error_exit "OVDADMINPASSWORD not set."
fi

if [ "x${OIDHOSTNAME}" = "x" ]; then
    error_exit "OIDHOSTNAME not set."
fi

echo_d "Parameter Validation -- DONE"

#Create Config Directory Structure
echo_d "Creating Config Directory Structure"
mkdir -p $IDMCONFIGLOCATION
chown -R oracle:oinstall $IDMCONFIGLOCATION
chmod -R 775 $IDMCONFIGLOCATION
check_error "Errors during creating config directory structure.";
echo_d "Creating Config Directory Structure -- DONE"

#Copy Configuration Template
echo_d "Copying Configuration Template"
cp $CONFIGTEMPLATESLOCATION/*.ldif $IDMCONFIGLOCATION/.
check_error "Errors during copying ldif filse.";
chown oracle:oinstall $IDMCONFIGLOCATION/*.ldif
cp $CONFIGTEMPLATESLOCATION/adapters.os_xml $IDMCONFIGLOCATION
check_error "Errors during copying adapters.os_xml.";
chown oracle:oinstall $IDMCONFIGLOCATION/adapters.os_xml
echo_d "Copying Configuration Template -- DONE"

#Create OVD Add Adapters Script
echo_d "Create OVD Add Adapters Script"

touch $IDMCONFIGADDADAPTERSCRIPT
chown oracle:oinstall $IDMCONFIGADDADAPTERSCRIPT
chmod a+x $IDMCONFIGADDADAPTERSCRIPT

echo "#!/bin/bash" > $IDMCONFIGADDADAPTERSCRIPT
echo "cd $IDMCONFIGLOCATION" >> $IDMCONFIGADDADAPTERSCRIPT
echo "$MW_HOME/asinst_1/bin/opmnctl stopproc ias-component=ovd1" >> $IDMCONFIGADDADAPTERSCRIPT
echo "mv $MW_HOME/asinst_1/config/OVD/ovd1/adapters.os_xml $MW_HOME/asinst_1/config/OVD/ovd1/adapters.os_xml.orig" >> $IDMCONFIGADDADAPTERSCRIPT
echo "sed -ie \"s/OIDHOSTNAME/$OIDHOSTNAME/\" adapters.os_xml" >> $IDMCONFIGADDADAPTERSCRIPT
echo "sed -ie \"s/OIDADMINUSER/$OIDADMINUSER/\" adapters.os_xml" >> $IDMCONFIGADDADAPTERSCRIPT
echo "sed -ie \"s/OIDADMINPASSWORD/$OIDADMINPASSWORD/\" adapters.os_xml" >> $IDMCONFIGADDADAPTERSCRIPT
echo "cp -rp adapters.os_xml $MW_HOME/asinst_1/config/OVD/ovd1/." >> $IDMCONFIGADDADAPTERSCRIPT
echo "$MW_HOME/asinst_1/bin/opmnctl startproc ias-component=ovd1" >> $IDMCONFIGADDADAPTERSCRIPT
echo "exit \"$?\"" >> $IDMCONFIGADDADAPTERSCRIPT

echo_d "Create OVD Add Adapters Script -- DONE"

#Switch Oracle User
echo_d "Running OVD Add Adapters Script"
su - oracle -c $IDMCONFIGADDADAPTERSCRIPT
check_error "Failed to add adapterss to OVD.";
echo_d "Running OVD Add Adapters Script -- DONE"

#Create OVD Add Local OUs Script
echo_d "Create OVD Add Local OUs Script"

touch $IDMCONFIGADDLOCALOUSCRIPT
chown oracle:oinstall $IDMCONFIGADDLOCALOUSCRIPT
chmod a+x $IDMCONFIGADDLOCALOUSCRIPT

echo "#!/bin/bash" > $IDMCONFIGADDLOCALOUSCRIPT
echo "cd $IDMCONFIGLOCATION" >> $IDMCONFIGADDLOCALOUSCRIPT
echo "export ORACLE_HOME=$MW_HOME/idm" >> $IDMCONFIGADDLOCALOUSCRIPT
echo "$MW_HOME/idm/bin/ldapadd -h localhost -p $OVDPORT -D $OVDADMINUSER -w $OVDADMINPASSWORD -f localStoreOUs.ldif" >> $IDMCONFIGADDLOCALOUSCRIPT
echo "exit \"$?\"" >> $IDMCONFIGADDLOCALOUSCRIPT

echo_d "Create OVD Add Local OUs Script -- DONE"

#Switch Oracle User
echo_d "Running OVD Add Local OUs Script"
su - oracle -c $IDMCONFIGADDLOCALOUSCRIPT
check_error "Failed to add local store OUs to OVD.";
echo_d "Running OVD Add Local OUs Script -- DONE"

#Create OVD Modify vmwPerson Script
echo_d "Create OVD Modify vmwPerson Script"

touch $OVDMODVMWPERSONSCRIPT
chown oracle:oinstall $OVDMODVMWPERSONSCRIPT
chmod a+x $OVDMODVMWPERSONSCRIPT

echo '#!/bin/bash' >> $OVDMODVMWPERSONSCRIPT
echo "cd $IDMCONFIGLOCATION" >> $OVDMODVMWPERSONSCRIPT
echo "export ORACLE_HOME=$MW_HOME/idm" >> $OVDMODVMWPERSONSCRIPT
echo "$MW_HOME/idm/bin/ldapmodify -D $OVDADMINUSER -w $OVDADMINPASSWORD -p $OVDPORT -f mod_vmwperson.ldif" >> $OVDMODVMWPERSONSCRIPT
echo "exit \"$?\"" >> $OVDMODVMWPERSONSCRIPT

echo_d "Create OVD Modify vmwPerson Script -- DONE"

#Run OVD Modify vmwPerson Script
echo_d "Running OVD Modify vmwPerson Script"
su - oracle -c $OVDMODVMWPERSONSCRIPT
check_error "Failed to modiy vmwPerson.";
echo_d "Running OVD Modify vmwPerson Script -- DONE"

return 0