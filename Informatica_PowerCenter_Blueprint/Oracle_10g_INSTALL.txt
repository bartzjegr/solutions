#!/bin/bash

# Import global conf 
. $global_conf

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/vmware/bin:/opt/vmware/bin
export HOME=/root

# Tested on CentOS
if [ -x /usr/sbin/selinuxenabled ] && /usr/sbin/selinuxenabled; then
    if [ -x /usr/sbin/setenforce ]; then
        /usr/sbin/setenforce Permissive
    else
        echo 'SELinux is enabled. This may cause installation to fail.'
    fi
fi

#########make swapfile for installer#############
#Oracle installer will test for a swap size of 150M, this guarantees we have it
dd if=/dev/zero of=/tmp/swapfile bs=1024 count=150000
mkswap /tmp/swapfile
swapon /tmp/swapfile



#Putting central inventory in root partition
#INVENTORY_LOCATION="/oracle/centralInventory"
INVENTORY_LOCATION="$ORACLE_BASE/products/10.2.0/oraInventory"

#Defining home in ORACLE_BASE to avoid problems
ORACLE_HOME="$ORACLE_BASE/products/10.2.0/db"


#########SCRIPT INTERNAL PARAMETERS#########
MOUNTPOINTLOCATION=/tmp/mount
ORCALEINSTALLERLOCATION="$ORACLE_BASE/orclinstaller"
SYSCTLCONF="/etc/sysctl.conf"
ORACLEINSTALLSCRIPT="$ORCALEINSTALLERLOCATION/orclscript_runinstaller.sh"
ORACLENETCACONFIGURATIONSCRIPT="$ORCALEINSTALLERLOCATION/orclscript_netca_configuration.sh"
ORACLEDBCACONFIGURATIONSCRIPT="$ORCALEINSTALLERLOCATION/orclscript_dbca_configuration.sh"

#Response File location
DBFILE="$ORCALEINSTALLERLOCATION/db_install.rsp"
NETCAFILE="$ORCALEINSTALLERLOCATION/netca.rsp"
DBCAFILE="$ORCALEINSTALLERLOCATION/dbca.rsp"

#Response File Backup location
DBFILE_BACKUP="$ORCALEINSTALLERLOCATION/database/response/db_install-original.rsp"
NETCAFILE_BACKUP="$ORCALEINSTALLERLOCATION/database/response/netca-original.rsp"
DBCAFILE_BACKUP="$ORCALEINSTALLERLOCATION/database/response/dbca-original.rsp"
PROGNAME=`basename $0`

#Array
INSTALL_EDITION_ARRAY=(EE SE SEONE)
LISTENER_PROTOCOL_ARRAY=(TCP TCPS NMP IPC VI)
LANG_ARRAY=(en fr ar bn pt_BR bg fr_CA ca hr cs da nl ar_EG en_GB et fi de el iw hu is in it ja ko es lv lt ms es_MX no pl pt ro ru zh_CN sk sl es_ES sv th zh_TW tr uk vi)

###########Parameter Validation Functions##################
## Function To Display Error and Exit
function check_error()
{
   if [ ! "$?" = "0" ]; then
      error_exit "$1";
   fi
}

function error_exit()
{
   echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
   exit 1
}

## Function To Validate Integer 
function valid_int()
{
   local data=$1
   if [[ $data =~ ^[0-9]{1,9}$ ]]; then
      return 0;
   else
      return 1
   fi
}

function check_install_edition()
{
   len=${#INSTALL_EDITION_ARRAY[*]}
   local temp=$1;
   for (( i=0; $i < $len; i++ )) do
       if [ "${INSTALL_EDITION_ARRAY[$i]}" = "$temp" ]; then
          return;
       fi
   done
   error_exit "Invalid Install Edition"
}

function check_listener_protocol()
{
   len=${#LISTENER_PROTOCOL_ARRAY[*]}
   local temp=$1;
   for (( i=0; $i < $len; i++ )) do
       if [ "${LISTENER_PROTOCOL_ARRAY[$i]}" = "$temp" ]; then
          return;
       fi
   done
   error_exit "Invalid Listener Protocol"
}

function check_lang()
{
   len=${#LANG_ARRAY[*]}
   local temp=$1;
   for (( i=0; $i < $len; i++ )) do
       if [ "${LANG_ARRAY[$i]}" = "$temp" ]; then
          return;
       fi
   done
   error_exit "Invalid Language"
}

function check_email()
{
   local email=$1;
   case $email in
   *@?*.?*) ;;
   *) error_exit "Invalid EMAIL ID"; false ;;
   esac
}

function echo_d() 
{
    CURDATE=`date +%H:%M:%S`
    echo -e $CURDATE  "$*"
}


####################SCRIPT EXECUTION ##################
echo_d "Parameter Validation"

if [ "x${ORACLE_HOSTNAME}" = "x" ]; then 
    error_exit "ORACLE_HOSTNAME not set."
fi

if [ "x${INVENTORY_LOCATION}" = "x" ]; then 
    error_exit "INVENTORY_LOCATION not set."
fi

if [ "x${SELECTED_LANGUAGES}" = "x" ]; then 
    error_exit "SELECTED_LANGUAGES not set."
else
   check_lang $SELECTED_LANGUAGES
fi

if [ "x${ORACLE_HOME}" = "x" ]; then 
    error_exit "ORACLE_HOME not set."
fi

if [ "x${ORACLE_BASE}" = "x" ]; then 
    error_exit "ORACLE_BASE not set."
fi

if [ "x${INSTALL_EDITION}" = "x" ]; then 
    error_exit "INSTALL_EDITION not set."
else
    check_install_edition $INSTALL_EDITION;
fi

if [ "x${EMAIL_ADDRESS}" = "x" ]; then 
    error_exit "EMAIL_ADDRESS not set."
else
   check_email $EMAIL_ADDRESS;
fi

if [ "x${LISTENER_PROTOCOL}" = "x" ]; then 
    error_exit "LISTENER_PROTOCOL not set."
else
   check_listener_protocol $LISTENER_PROTOCOL
fi

if [ "x${LISTENER_PORT}" = "x" ]; then 
    error_exit "LISTENER_PORT not set."
else
   if ! valid_int $LISTENER_PORT; then
      error_exit "Invalid parameter LISTENER_PORT"
   fi
fi

if [ "x${GDBNAME}" = "x" ]; then 
    error_exit "GDBNAME not set."
fi

if [ "x${SID}" = "x" ]; then 
    error_exit "SID not set."
fi

if [ "x${SYSTEMPASSWORD}" = "x" ]; then 
    error_exit "SYSTEMPASSWORD not set."
fi

if [ "x${SYSPASSWORD}" = "x" ]; then 
    error_exit "SYSPASSWORD not set."
fi

if [ "x${NFSPATH}" = "x" ]; then 
    error_exit "NFSPATH not set."
fi

echo_d "Parameter Validation -- DONE"

basearch=`uname -p`

echo_d "Updating pre-requiste packages"
#yum --nogpgcheck --noplugins -y update make compat-db gcc gcc-c++ libstdc++ pdksh sysstat compat-libstdc++-33 elfutils-libelf-devel elfutils-libelf-devel-static unixODBC unixODBC-devel libaio-devel nfs-utils unzip 
#yum --nogpgcheck --noplugins -y install make compat-db gcc gcc-c++ libstdc++ pdksh sysstat compat-libstdc++-33 elfutils-libelf-devel elfutils-libelf-devel-static unixODBC unixODBC-devel libaio-devel nfs-utils unzip 

YUM_COMMONS="unzip"
YUM_ORACLE_DEPS="binutils compat-db elfutils-libelf-devel-static compat-libstdc++-33 compat-libstdc++ elfutils-libelf elfutils-libelf-devel gcc gcc-c++ glibc glibc glibc-common glibc-devel glibc-devel libaio libaio-devel libgcc libgcc libstdc++ lbXtst libstdc++ libstdc++-devel make numactl-devel sysstat nfs-utils pdksh unixODBC unixODBC-devel"
YUM_ORACLE_DEPS+=" glibc.i686"

yum --nogpgcheck -y install $YUM_COMMONS
yum --nogpgcheck -y install $YUM_ORACLE_DEPS

echo_d "Updating pre-requiste packages -- DONE"


#Basic Directory Structure
mkdir -p $ORACLE_BASE
mkdir -p $ORACLE_HOME
mkdir -p $INVENTORY_LOCATION
chown -R oracle:oinstall $ORACLE_BASE
chown -R oracle:oinstall $ORACLE_HOME
chown -R oracle:oinstall $INVENTORY_LOCATION
chmod -R 775 $ORACLE_BASE
chmod -R 775 $ORACLE_HOME
chmod -R 775 $INVENTORY_LOCATION

mkdir -p $MOUNTPOINTLOCATION
mkdir -p $ORCALEINSTALLERLOCATION


check_error "Errors during creating basic directory structure.";



echo_d "Mounting Oracle Installer"
#Mounting the NFS Drive
DIST=`cat /etc/redhat-release |sed s/\ release.*//`
if [ "$DIST" = "CentOS" ] ; then
    /sbin/service portmap start
else
    /sbin/service rpcbind start
fi
mount $NFSPATH $MOUNTPOINTLOCATION
check_error "Errors during mounting oracle installer.";
echo_d "Mounting Oracle Installer -- DONE"

# Copy Oracle 11g Installer
echo_d "Copying Oracle Installer"
   cp -r $MOUNTPOINTLOCATION/OIDDBBINARIES/* $ORACLE_HOME/
   
echo_d "Copying Oracle Installer -- DONE"

#echo_d "Extracting Oracle Installer"
#unzip -q $ORCALEINSTALLERLOCATION/linux_11gR2_database_1of2.zip -d $ORCALEINSTALLERLOCATION
#check_error "Errors during extracting 1of2 of Oracle installer.";
#unzip -q $ORCALEINSTALLERLOCATION/linux_11gR2_database_2of2.zip -d $ORCALEINSTALLERLOCATION
#check_error "Errors during extracting 2of2 of Oracle installer.";
#echo_d "Extracting Oracle Installer -- DONE"

echo_d "Modifying the response files"
#Creating backup of property files
#cp --backup --force -- $DBFILE $DBFILE_BACKUP
#cp --backup --force -- $NETCAFILE $NETCAFILE_BACKUP
#cp --backup --force -- $DBCAFILE $DBCAFILE_BACKUP

#Changing the parameter in db.rsp
sed -i "s~ORACLE_HOSTNAME=.*~ORACLE_HOSTNAME=$ORACLE_HOSTNAME~g" $DBFILE
sed -i "s~INVENTORY_LOCATION=.*~INVENTORY_LOCATION=$INVENTORY_LOCATION~g" $DBFILE
sed -i "s~SELECTED_LANGUAGES=.*~SELECTED_LANGUAGES=$SELECTED_LANGUAGES~g" $DBFILE
sed -i "s~ORACLE_HOME=.*~ORACLE_HOME=$ORACLE_HOME~g" $DBFILE
sed -i "s~ORACLE_BASE=.*~ORACLE_BASE=$ORACLE_BASE~g" $DBFILE
sed -i "s~oracle.install.db.InstallEdition=.*~oracle.install.db.InstallEdition=$INSTALL_EDITION~g" $DBFILE
sed -i "s~oracle.install.db.config.starterdb.dbcontrol.emailAddress=.*~oracle.install.db.config.starterdb.dbcontrol.emailAddress=$EMAIL_ADDRESS~g" $DBFILE
sed -i "s~oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification=.*~oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification=true~g" $DBFILE
sed -i "s~oracle.install.option=.*~oracle.install.option=INSTALL_DB_SWONLY~g" $DBFILE
sed -i "s~UNIX_GROUP_NAME=.*~UNIX_GROUP_NAME=oinstall~g" $DBFILE
sed -i "s~oracle.install.db.DBA_GROUP=.*~oracle.install.db.DBA_GROUP=dba~g" $DBFILE
sed -i "s~oracle.install.db.OPER_GROUP=.*~oracle.install.db.OPER_GROUP=oinstall~g" $DBFILE
sed -i "s~oracle.install.db.config.starterdb.type=.*~oracle.install.db.config.starterdb.type=GENERAL_PURPOSE~g" $DBFILE
sed -i "s~SECURITY_UPDATES_VIA_MYORACLESUPPORT=.*~SECURITY_UPDATES_VIA_MYORACLESUPPORT=false~g" $DBFILE
sed -i "s~DECLINE_SECURITY_UPDATES=.*~DECLINE_SECURITY_UPDATES=true~g" $DBFILE

#Changing the parameter in netca.rsp
LISTENERPROTOCOL="{\"$LISTENER_PROTOCOL;$LISTENER_PORT\"}"
sed -i "s~LISTENER_PROTOCOLS=.*~#LISTENER_PROTOCOLS=~g" $NETCAFILE
echo "LISTENER_PROTOCOLS = $LISTENERPROTOCOL" >> $NETCAFILE

#Changing the parameter in dbca.rsp
sed -i "s~GDBNAME=.*~#GDBNAME~g" $DBCAFILE
sed -i "s~SID=.*~#SID~g" $DBCAFILE
sed -i "150iGDBNAME = $GDBNAME" $DBCAFILE
sed -i "150iSID = $SID" $DBCAFILE
sed -i "150iSYSTEMPASSWORD = $SYSTEMPASSWORD" $DBCAFILE
sed -i "150iSYSPASSWORD = $SYSPASSWORD" $DBCAFILE
echo_d "Modifying the response files -- DONE"

#Setup Standard Users Ands Groups
echo_d "Adding Oracle User"
#/usr/sbin/groupdel oinstall
#/usr/sbin/groupdel dba
#/usr/sbin/userdel oracle

/usr/sbin/groupadd oinstall
/usr/sbin/groupadd dba
/usr/sbin/useradd -m -g oinstall -G dba oracle
#check_error "Errors during setting up user accounts.";
echo_d "Adding Oracle User -- DONE"

echo_d "Setting Kernel Parameters"
#Set Kernel Parameters
echo "kernel.shmmni=4096" >> $SYSCTLCONF
echo "kernel.sem=250 32000 100 128" >> $SYSCTLCONF
echo "fs.file-max=6815744" >> $SYSCTLCONF
echo "net.ipv4.ip_local_port_range=9000 65500" >> $SYSCTLCONF
echo "net.core.rmem_default=262144" >> $SYSCTLCONF
echo "net.core.wmem_default=262144" >> $SYSCTLCONF
echo "net.core.rmem_max=4194304" >> $SYSCTLCONF
echo "net.core.wmem_max=1048576" >> $SYSCTLCONF
echo "fs.aio-max-nr=1048576" >> $SYSCTLCONF

# Upload Changed Kernel Parameters
/sbin/sysctl -p
echo_d "Setting Kernel Parameters -- DONE"

#Basic Directory Structure
#mkdir -p $ORACLE_BASE
#mkdir -p $ORACLE_HOME
#mkdir -p $INVENTORY_LOCATION
chown -R oracle:oinstall $ORACLE_BASE
chown -R oracle:oinstall $ORACLE_HOME
chown -R oracle:oinstall $INVENTORY_LOCATION
chmod -R 775 $ORACLE_BASE
chmod -R 775 $ORACLE_HOME
chmod -R 775 $INVENTORY_LOCATION
#check_error "Errors during creating basic directory structure.";

#Modifying the shell limit and bash profile
echo_d "Modifying the shell limit and bash profile"
echo "oracle soft nproc 2047" >> /etc/security/limits.conf  
echo "oracle hard nproc 16384" >> /etc/security/limits.conf 
echo "oracle soft nofile 1024" >> /etc/security/limits.conf 
echo "oracle hard nofile 65536" >> /etc/security/limits.conf
echo "Modifying the shell limit -- DONE"

#Modifying pam.d login
echo "session required pam_limits.so" >> /etc/pam.d/login

#Modify the bash profile oracle user
echo "export ORACLE_HOSTNAME=$ORACLE_HOSTNAME" >> /home/oracle/.bash_profile
echo "export ORACLE_UNQNAME=$SID" >> /home/oracle/.bash_profile
echo "export ORACLE_BASE=$ORACLE_BASE" >> /home/oracle/.bash_profile
echo "export ORACLE_HOME=$ORACLE_HOME" >> /home/oracle/.bash_profile
echo "export ORACLE_SID=$SID" >> /home/oracle/.bash_profile
echo "export TNS_ADMIN=$ORACLE_HOME/network/admin" >> /home/oracle/.bash_profile
echo "export PATH=/usr/sbin:$ORACLE_HOME/bin:$PATH" >> /home/oracle/.bash_profile
echo "export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib:/usr/lib64" >> /home/oracle/.bash_profile
echo "export CLASSPATH=$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib" >> /home/oracle/.bash_profile
echo_d "Modifying the shell limit and bash profile -- DONE"

# RUN INSTALLER
touch $ORACLEINSTALLSCRIPT
chmod 777 $ORACLEINSTALLSCRIPT
echo "#!/bin/bash" >> $ORACLEINSTALLSCRIPT
echo "cd $ORACLE_HOME/bin" >> $ORACLEINSTALLSCRIPT
echo "./dbca -silent -responseFile $DBFILE" >> $ORACLEINSTALLSCRIPT
echo "exit \"$?\"" >> $ORACLEINSTALLSCRIPT

touch $ORACLENETCACONFIGURATIONSCRIPT
chmod 777 $ORACLENETCACONFIGURATIONSCRIPT
echo "#!/bin/bash" >> $ORACLENETCACONFIGURATIONSCRIPT
echo "cd $ORACLE_HOME/bin/" >> $ORACLENETCACONFIGURATIONSCRIPT
echo "./netca /silent /responseFile $NETCAFILE" >> $ORACLENETCACONFIGURATIONSCRIPT
echo "exit \"$?\"" >> $ORACLENETCACONFIGURATIONSCRIPT

touch $ORACLEDBCACONFIGURATIONSCRIPT
chmod 777 $ORACLEDBCACONFIGURATIONSCRIPT
echo "#!/bin/bash" >> $ORACLEDBCACONFIGURATIONSCRIPT
echo "cd $ORACLE_HOME/bin/" >> $ORACLEDBCACONFIGURATIONSCRIPT
echo "./dbca -silent -responseFile $DBCAFILE" >> $ORACLEDBCACONFIGURATIONSCRIPT
echo "exit \"$?\"" >> $ORACLEDBCACONFIGURATIONSCRIPT

#Switch Oracle User
echo_d "Starting Oracle Database Creation"
	   export DISPLAY=:0	
           echo_d "Configuring NetCA and creating starter DB"  
           su - oracle -c $ORACLENETCACONFIGURATIONSCRIPT
           check_error "Unsuccessfull NETCA Configuration";
           su - oracle -c $ORACLEDBCACONFIGURATIONSCRIPT
           check_error "Unsuccessfull DBCA Configuration";
           echo_d "Configuring Oracle -- DONE"  

sleep 10
echo_d "Checking starter DB connectivity"
SQLPLUS_TESTSCRIPT="/home/oracle/sqlplus.sh"

# The number 2718281828459045 should never occur otherwise in the sqlplus output
echo "#!/bin/bash" >> $SQLPLUS_TESTSCRIPT
echo "$ORACLE_HOME/bin/sqlplus / as sysdba <<EOF" >> $SQLPLUS_TESTSCRIPT
echo "select 2718281828459045 from dual;" >> $SQLPLUS_TESTSCRIPT
echo "EOF" >> $SQLPLUS_TESTSCRIPT
chmod +x $SQLPLUS_TESTSCRIPT

# Check that we are finally able to connect to the Oracle service (ORA-01034 err code for ORCL service unavailable)
CMD_OUTPUT_SUC=`su - oracle -c /home/oracle/sqlplus.sh |grep 2718281828459045|wc -l`
CMD_OUTPUT_FAIL=`su - oracle -c /home/oracle/sqlplus.sh |grep ORA-01034|wc -l`
if [ $CMD_OUTPUT_SUC == "1" ]; then
   if [ $CMD_OUTPUT_FAIL = "1" ]; then
      echo_d "*** Error: Unable to connect to $SID"
      exit 1
   else
      echo_d "*** Success: Connected to $SID"
   fi
else
  echo_d "*** Error: Unable to connect to $SID"
  exit 1
fi

#rm $ORACLEINSTALLSCRIPT
#rm $ORACLENETCACONFIGURATIONSCRIPT
#rm $ORACLEDBCACONFIGURATIONSCRIPT
#rm $SQLPLUS_TESTSCRIPT

            